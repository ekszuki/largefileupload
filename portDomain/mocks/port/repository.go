// Code generated by MockGen. DO NOT EDIT.
// Source: portDomain/app/contracts/repository.go

// Package port is a generated GoMock package.
package port

import (
	context "context"
	models "ekszuki/uploader/portDomain/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPortRepository is a mock of PortRepository interface.
type MockPortRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortRepositoryMockRecorder
}

// MockPortRepositoryMockRecorder is the mock recorder for MockPortRepository.
type MockPortRepositoryMockRecorder struct {
	mock *MockPortRepository
}

// NewMockPortRepository creates a new mock instance.
func NewMockPortRepository(ctrl *gomock.Controller) *MockPortRepository {
	mock := &MockPortRepository{ctrl: ctrl}
	mock.recorder = &MockPortRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortRepository) EXPECT() *MockPortRepositoryMockRecorder {
	return m.recorder
}

// FindByKey mocks base method.
func (m *MockPortRepository) FindByKey(ctx context.Context, key string) (*models.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", ctx, key)
	ret0, _ := ret[0].(*models.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockPortRepositoryMockRecorder) FindByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockPortRepository)(nil).FindByKey), ctx, key)
}

// SaveOrUpdate mocks base method.
func (m *MockPortRepository) SaveOrUpdate(ctx context.Context, port *models.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdate", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdate indicates an expected call of SaveOrUpdate.
func (mr *MockPortRepositoryMockRecorder) SaveOrUpdate(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdate", reflect.TypeOf((*MockPortRepository)(nil).SaveOrUpdate), ctx, port)
}
